<?php

namespace CTRV\PlaceBundle\Controller;

use Symfony\Component\HttpFoundation\Response;

use CTRV\PlaceBundle\Form\ChoosePlaceTypeType;

use CTRV\CommonBundle\DependencyInjection\Constants;

use Doctrine\ORM\EntityRepository;

use CTRV\PlaceBundle\Form\ChoosePlaceTypeForm;

use CTRV\PlaceBundle\Form\ImportPlaceType;

use Symfony\Component\HttpFoundation\Request;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Template;
use CTRV\PlaceBundle\Entity\Place;
use CTRV\PlaceBundle\Entity\ImportPlace;
use CTRV\PlaceBundle\Form\PlaceType;

/**
 * Place controller.
 *
 * @Route("/place")
 */
class PlaceController extends Controller
{
	
	/**
	 * Importer un fichier de données de place
	 * @Route("/import",name="import_place")
	 * @Template()
	 */
	public function importAction () {
	
		$form = $this->createForm(new ImportPlaceType(), new ImportPlace());
	
		if( $this->get('request')->getMethod() == 'POST' ) {
				
			$form->bind($this->get('request'));
	
			if ( $form->isValid() ) {
	
				$city = $this->get('session')->get("city");
				
				$this->redirect($this->generateUrl("home"));
				
				$importPlace = $form->getData();
				$fileName = $city->getName().'.'.$importPlace->file->guessExtension();
				$importPlace->file->move($importPlace->getUploadRootDir(), $fileName);
				$importPlace->file = null;
				
				$this->get("place_service")->savePlaceDataFromFile ($importPlace->getUploadRootDir().'/'.$fileName, $city, $importPlace->placeType);
				$this->get('session')->getFlashBag()->add('success', $this->get('translator')->trans('place.import.success'));
				
			}
		}
		
		return array('form'=>$form->createView());
	}
	
	
    /**
     * Affiche le formulaire de choix de type de place 
     * @Route("/list", name="place")
     * @Template()
     */
    public function indexAction () {

        $form = $this->createForm(new ChoosePlaceTypeType());
        return array (
        	'form' => $form->createView(),
        );
    }
    
    /**
     * Charge les donnees du type de place spécifié en AJAX (places ajoutées par des utilisateurs sous forme de tableau paginé)
     * @Route("/loadPlacesByType", name="loadPlacesByType")
     * @Template()
     */
    public function loadPlacesByTypeAction () {
    	
    	$em = $this->getDoctrine()->getEntityManager();
    	
    	$currentCity = $this->get('session_service')->getCity();
    	
    	if ($currentCity == null) {
    		$this->get('session')->getFlashBag()->add('error', $this->get('translator')->trans('session.city.not_found'));
    		$this->redirect($this->generateUrl("home"));
    	}
    	
    	$page = $this->getRequest()->get("page",1);
    	$placeTypeId = $this->getRequest()->get("placeTypeId");
    	
    	$entities = $this->get("place_service")->getPlaceAddedByUsers($placeTypeId, $currentCity);
    	
    	//pagination
        $nb_entities = count($entities);
        $nb_entities_page = Constants::places_number_per_page;
        $nb_pages = ceil($nb_entities/$nb_entities_page);
        $offset = ($page-1) * $nb_entities_page;
        
        $entities = array_slice($entities, $offset,$nb_entities_page);
       	
       	return  array (
            'entities' => $entities,
        	'nb_pages' => $nb_pages,
        	'page' => $page,
        	'nb_entities' => $nb_entities
        );
    }  
    
    
    /**
     * @Route("/lat_lng",name="lat_lng")
     * @Template()
     */
    public function getLatitudeLongitudePlace () {
    
    }


    /**
     * Displays a form to edit an existing Place entity.
     *
     * @Route("/{id}/edit", name="place_edit")
     * @Template()
     */
    public function editAction($id) {
    	
        $em = $this->getDoctrine()->getManager();

        $entity = $em->getRepository('CTRVPlaceBundle:Place')->find($id);

        if (!$entity) {
            throw $this->createNotFoundException('Unable to find Place entity.');
        }

        $editForm = $this->createForm(new PlaceType(), $entity);
        $deleteForm = $this->createDeleteForm($id);

        return array(
            'entity'      => $entity,
            'edit_form'   => $editForm->createView(),
            'delete_form' => $deleteForm->createView(),
        );
    }

    /**
     * Deletes a Place entity.
     *
     * @Route("/{id}/delete", name="place_delete" ) //requirements={"id" = "\d+"}
     * @Method("POST")
     * @Template()
     */
    public function deleteAction($id) {
        $em = $this->getDoctrine()->getManager();
        $entity = $em->getRepository('CTRVPlaceBundle:Place')->find($id);

        $em->remove($entity);
        $em->flush();
        
        return new Response(json_encode(array('result'=>true)));
    }

}
