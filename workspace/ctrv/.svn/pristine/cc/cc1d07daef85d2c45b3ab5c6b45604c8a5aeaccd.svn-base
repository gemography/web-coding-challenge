<?php

namespace CTRV\FlowBundle\Controller;

use Symfony\Component\HttpFoundation\Response;

use CTRV\CommonBundle\DependencyInjection\Constants;

use Doctrine\ORM\EntityRepository;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Template;
use CTRV\FlowBundle\Entity\GroupUser;


/**
 * Groupe controller.
 *
 * @Route("/groupe")
 */
class GroupeController extends Controller
{
	
	/**
     * Charge les donnees de tous les groupes 
     * @Route("/list", name="groupe")
     * @Template()
     */
    public function loadGroupAction () {
    	
    	$em = $this->getDoctrine()->getEntityManager();
    	
    	$currentCity = $this->get('session_service')->getCity();
    	
    	if ($currentCity == null) {
    		$this->get('session')->getFlashBag()->add('error', $this->get('translator')->trans('session.city.not_found'));
    		$this->redirect($this->generateUrl("home"));
    	}
    	
    	$page = $this->getRequest()->get("page",1);
    	//recupére l'ensemble des groupes existants
    	$entities = $this->get("groupe_service")->getGroup();
    	//recupére l'ensemble des groupes de la ville courante
    	$entities1 = $this->get("groupe_service")->getGroupByCity($currentCity);
    	// on crée un tableau
    	$tab = array();
    	// On récupére le nombre de membres de chaque groupe pour le placer dans le tableau
    	foreach ($entities1 as $entity) {
    		$tab[$entity->getId()] = count($this->get("groupe_service")->getGroupMember($entity->getId()));
    	}
    	
    	  //pagination
        $nb_entities = count($entities);
        $nb_entities1 = count($entities1);
        $nb_entities_page = Constants::groupes_number_per_page;
        $nb_pages = ceil($nb_entities1/$nb_entities_page);
        $offset = ($page-1) * $nb_entities_page;
        
        $entities = array_slice($entities, $offset,$nb_entities_page);
       	
       	return  array (
          'group_member'=>$tab,
            'entities' => $entities,
       			'entities1' => $entities1,
         'nb_pages' => $nb_pages,
         'page' => $page,
         'nb_entities' => $nb_entities,
       			'nb_entities1' => $nb_entities1,
         'city'=>$currentCity
        );
    }  
    
    /**
     * Bloquer un groupe
     *
     * @Route("/block/{id}", name="groupe_block" ) //requirements={"id" = "\d+"}
     * @Template()
     */
    public function blockAction ($id) {
    	$em = $this->getDoctrine()->getManager();
    	$entity = $em->getRepository('CTRVFlowBundle:GroupUser')->find($id);
    	$entity->setIsBlocked("1");
    	$em->persist($entity);
    	$em->flush();
    
    	return $this->redirect($this->generateUrl("groupe"));
    }
    /**
     * Debloquer un groupe
     *
     * @Route("/deblock/{id}", name="groupe_deblock" ) //requirements={"id" = "\d+"}
     * @Template()
     */
    public function deblockAction ($id) {
    	$em = $this->getDoctrine()->getManager();
    	$entity = $em->getRepository('CTRVFlowBundle:GroupUser')->find($id);
    	$entity->setIsBlocked("0");
    	$em->persist($entity);
    	$em->flush();
    
    	return $this->redirect($this->generateUrl("groupe"));
    }
    /**
     * Deletes a groupe entity.
     *
     * @Route("/{id}/delete", name="groupe_delete" ) //requirements={"id" = "\d+"}
     * @Method("POST")
     * @Template()
     */
    public function deleteAction($id) {
        $em = $this->getDoctrine()->getManager();
        $entity = $em->getRepository('CTRVFlowBundle:GroupUser')->find($id);

        $em->remove($entity);
        $em->flush();
        
        return new Response(json_encode(array('result'=>true)));
    }
}
