<?php

namespace CTRV\CommonBundle\Controller;

use Doctrine\ORM\EntityRepository;

use Symfony\Component\HttpFoundation\Response;

use CTRV\CommonBundle\DependencyInjection\Constants;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Template;
use JMS\SecurityExtraBundle\Annotation\Secure;

/**
 * Abuse controller.
 *
 * @Route("/abuse")
 */
class AbusController extends Controller
{
    
    /**
     * @Route("/list",name="abuse")
     * @Template()
     * Retourne la liste de tous les Abus 
     */
    public function allCommentAbuseAction(){
    	
    	$em = $this->getDoctrine()->getEntityManager();
    	$currentCity = $this->get('session_service')->getCity();
    	
    	if ($currentCity == null) {
    		$this->get('session')->getFlashBag()->add('error', $this->get('translator')->trans('session.city.not_found'));
    		$this->redirect($this->generateUrl("home"));
    	}
    	//Récupération de la lsite des abus
    	$entities = $this->get("common_service")->getAllCommentAbuse();
    	$page = intval ($this->getRequest()->get("page",1));
    	//pagination
    	$nb_entities = count($entities);
    	$nb_entities_page = Constants::abuse_number_per_page;
    	$nb_pages = ceil($nb_entities/$nb_entities_page);
    	$offset = ($page-1) * $nb_entities_page;
    	 
    	$entities = array_slice($entities, $offset,$nb_entities_page);
    	
    	return  array (
    			'entities' => $entities,
    			'nb_pages' => $nb_pages,
    			'page' => $page,
    			'nb_entities' => $nb_entities
    	);
    } 
    
    /**
     * @Route("/eventCommentAbuse",name="eventCommentAbuse")
     * @Template()
     * Retourne la liste de tous les commentaires signalés portant sur les évenements de la ville courante
     */
    public function eventCommentAbuseAction(){
    	 
    	$em = $this->getDoctrine()->getEntityManager();
    	$currentCity = $this->get('session_service')->getCity();
    	 
    	if ($currentCity == null) {
    		$this->get('session')->getFlashBag()->add('error', $this->get('translator')->trans('session.city.not_found'));
    		$this->redirect($this->generateUrl("home"));
    	}
    	//Récupération de la liste des commentaires signalés des évenements
    	$entities = $this->get("event_service")->getEventCommentAbuse($currentCity);
    	$page = intval ($this->getRequest()->get("page",1));
    	//pagination
    	$nb_entities = count($entities);
    	$nb_entities_page = Constants::abuse_number_per_page;
    	$nb_pages = ceil($nb_entities/$nb_entities_page);
    	$offset = ($page-1) * $nb_entities_page;
    
    	$entities = array_slice($entities, $offset,$nb_entities_page);
    	 
    	return  array (
    			'entities' => $entities,
    			'nb_pages' => $nb_pages,
    			'page' => $page,
    			'nb_entities' => $nb_entities,
    			'city'=>$currentCity
    	);
    }
    
    /**
     * @Route("/placeCommentAbuse",name="placeCommentAbuse")
     * @Template()
     * Retourne la liste de tous les commentaires signalés portant sur les places de la ville courante
     */
    public function placeCommentAbuseAction(){
    
    	$em = $this->getDoctrine()->getEntityManager();
    	$currentCity = $this->get('session_service')->getCity();
    
    	if ($currentCity == null) {
    		$this->get('session')->getFlashBag()->add('error', $this->get('translator')->trans('session.city.not_found'));
    		$this->redirect($this->generateUrl("home"));
    	}
    	//Récupération de la liste des commentaires signalés des places
    	$entities = $this->get("place_service")->getPlaceCommentAbuse($currentCity);
    	$page = intval ($this->getRequest()->get("page",1));
    	//pagination
    	$nb_entities = count($entities);
    	$nb_entities_page = Constants::abuse_number_per_page;
    	$nb_pages = ceil($nb_entities/$nb_entities_page);
    	$offset = ($page-1) * $nb_entities_page;
    
    	$entities = array_slice($entities, $offset,$nb_entities_page);
    
    	return  array (
    			'entities' => $entities,
    			'nb_pages' => $nb_pages,
    			'page' => $page,
    			'nb_entities' => $nb_entities,
    			'city'=>$currentCity
    	);
    }

    
    /**
     * @Route("/publicMessageAbuse",name="publicMessageAbuse")
     * @Template()
     * Retourne la liste de tous les messages publics signalés de la ville courante
     */
    public function publicMessageAbuseAction(){
    
    	$em = $this->getDoctrine()->getEntityManager();
    	$currentCity = $this->get('session_service')->getCity();
    
    	if ($currentCity == null) {
    		$this->get('session')->getFlashBag()->add('error', $this->get('translator')->trans('session.city.not_found'));
    		$this->redirect($this->generateUrl("home"));
    	}
    	//Récupération de la liste des messages publics signalés
    	$entities = $this->get("publicMessage_service")->getMessagePublicAbuse($currentCity);
    	$page = intval ($this->getRequest()->get("page",1));
    	//pagination
    	$nb_entities = count($entities);
    	$nb_entities_page = Constants::abuse_number_per_page;
    	$nb_pages = ceil($nb_entities/$nb_entities_page);
    	$offset = ($page-1) * $nb_entities_page;
    
    	$entities = array_slice($entities, $offset,$nb_entities_page);
    
    	return  array (
    			'entities' => $entities,
    			'nb_pages' => $nb_pages,
    			'page' => $page,
    			'nb_entities' => $nb_entities,
    			'city'=>$currentCity
    	);
    }
    
}
