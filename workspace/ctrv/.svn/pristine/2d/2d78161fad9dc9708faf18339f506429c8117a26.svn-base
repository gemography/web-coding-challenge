<?php

namespace CTRV\PlaceBundle\Entity;

use Doctrine\ORM\EntityRepository;

use Doctrine\ORM\Mapping as ORM;


class PlaceRepository extends EntityRepository
{
	
    /**
     * Retourne la liste des places par types ajoutées par les utilisateurs
     * @param unknown_type $placeType
     * @param unknown_type $city
     */
	public function getPlaceAddedByUsers ($placeType,$city) {
		$qb = $this->createQueryBuilder("p")
		->where("p.auteur is not null")
		->andWhere("p.placeType=?1")
		->andWhere("p.city=?2")
		->orderBy('p.addedDate', 'DESC')
		->setParameter(1, $placeType)
		->setParameter(2, $city)
		
		;
		return $qb->getQuery()->getResult();
	}
	
	/**
	 * Retourne la liste des places sans latitude ou longitude
	 * @param unknown_type $city
	 */
	public function getPlacesWithoutLatLong ($city) {
		$qb = $this->createQueryBuilder("p")
		->where("p.latitude is null OR p.longitude is null")
		->andWhere("p.city=?1")
		->orderBy('p.addedDate', 'DESC')
		->setParameter(1, $city)
	
		;
		return $qb->getQuery()->getResult();
	}
	
	/**
	 * Retourne la liste des places sans description 
	 * @param unknown_type $city
	 */
	public function getPlacesWithoutDescription ($city) {
		$qb = $this->createQueryBuilder("p")
		->where("p.description is null")
		->andWhere("p.city=?1")
		->orderBy('p.addedDate', 'DESC')
		->setParameter(1, $city)
	
		;
		return $qb->getQuery()->getResult();
	}
	
	/**
	 * Retourne la liste des places de la rue spécifiée
	 * @param unknown_type $searchText
	 */
	public function getPlaceByStreet ($searchText, $city) {
		$qb = $this->createQueryBuilder("p")
		->where("p.street like ?1")
		->andWhere("p.city=?2")
		->setParameter(1, "%".$searchText."%")
		->setParameter(2, $city)
		;
		return $qb->getQuery()->getResult();
	}
	
	
	public function getNotLocalizedPlaceNumber () {
		
		$qb = $this->createQueryBuilder("p")
		->select("count(p)")
		->where("p.latitude is null")
		->orWhere("p.longitude is null")
		;
		return $qb->getQuery()->getSingleScalarResult();
	}
	
	public function getAllPlaceNumber () {
	
		$qb = $this->createQueryBuilder("p")
		->select("count(p)")
		;
		return $qb->getQuery()->getSingleScalarResult();
	}
}