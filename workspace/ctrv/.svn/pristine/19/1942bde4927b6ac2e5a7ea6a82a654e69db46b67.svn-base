<?php

namespace CTRV\CommonBundle\Entity;

use Symfony\Component\Security\Core\User\UserInterface;

use Symfony\Component\Security\Core\User\UserProviderInterface;

use Doctrine\ORM\EntityRepository;

use Doctrine\ORM\Mapping as ORM;

class UserRepository extends EntityRepository implements UserProviderInterface {



	//retourne la liste des utilisateurs de la ville courante avec leur rôle
	public function getUsers ($city) {
		$qb = $this->createQueryBuilder("p")
		->select('a.name, p.login,p.firstName,p.lastName, p.address, p.isActive,p.id, p.isBlocked')
		->from('CTRV\CommonBundle\Entity\Role','a')
		->where("p.city=?1")
		->andWhere("p.role=a.id")
		->orderBy('p.registrationDate', 'DESC')
		->setParameter(1, $city)
		;
		return $qb->getQuery()->getResult();
	}
	
	//retourne la liste des utilisateurs connectés
	public function getUsersConnected () {
		$qb = $this->createQueryBuilder("p")
		->select ('p')
		->from('CTRV\CommonBundle\Entity\ConnectedUsers','a')
		->where("p.id=a.id")
		->orderBy('p.id', 'DESC')
		;
		return $qb->getQuery()->getResult();
	}

	//retourne la liste des utilisateurs connectés de la ville courante
	public function getUsersConnectedCity ($city) {
		$qb = $this->createQueryBuilder("p")
		->select ('p')
		->from('CTRV\CommonBundle\Entity\ConnectedUsers','a')
		->where("p.id=a.id")
		->andWhere("p.city=?1")
		->orderBy('p.id', 'DESC')
		->setParameter(1, $city)
		;
		return $qb->getQuery()->getResult();
	}

	//retourne la liste de tous les utilisateurs
	public function getAllUsers () {

		$qb = $this->createQueryBuilder("p")
				->orderBy('p.registrationDate', 'DESC');
		return $qb->getQuery()->getResult();
	}

	
	
	/**
	 * (non-PHPdoc)
	 * @see Symfony\Component\Security\Core\User.UserProviderInterface::loadUserByUsername()
	 */
	public function loadUserByUsername($username)
	{
		$q = $this
		->createQueryBuilder('u')
		->where('u.login = :login OR u.email = :email')
		->setParameter('login', $username)
		->setParameter('email', $username)
		->getQuery()
		;
	
		try {
			// The Query::getSingleResult() method throws an exception
			// if there is no record matching the criteria.
			$user = $q->getSingleResult();
		} catch (NoResultException $e) {
			$message = sprintf(
					'Unable to find an active admin AcmeUserBundle:User object identified by "%s".',
					$username
			);
			throw new UsernameNotFoundException($message, 0, $e);
		}
	
		return $user;
	}
	
	/**
	 * (non-PHPdoc)
	 * @see Symfony\Component\Security\Core\User.UserProviderInterface::refreshUser()
	 */
	public function refreshUser(UserInterface $user)
	{
		$class = get_class($user);
		if (!$this->supportsClass($class)) {
			throw new UnsupportedUserException(
					sprintf(
							'Instances of "%s" are not supported.',
							$class
					)
			);
		}
	
		return $this->find($user->getId());
	}
	
	/**
	 * (non-PHPdoc)
	 * @see Symfony\Component\Security\Core\User.UserProviderInterface::supportsClass()
	 */
	public function supportsClass($class)
	{
		return $this->getEntityName() === $class
		|| is_subclass_of($class, $this->getEntityName());
	}


	//desactiver un utilisateur
	public function desactiveUsers ($id) {
		$qb = $this->createQueryBuilder("p")
        ->update('CTRV\CommonBundle\Entity\User')
        ->where("id=?1")
        ->set('isActive', '0')
        ->setParameter(1, $id);
		$qb->execute();
		}
	/**
	 * Retourne la liste des users de nom ou prenom spécifié spécifiée
	 * @param unknown_type $searchText
	 */
	public function getUserByName($searchText, $city) {
		$qb = $this->createQueryBuilder("p")
		->where("p.firstname like ?1")
		->andWhere("p.city=?2")
		->setParameter(1, "%".$searchText."%")
		->setParameter(2, $city)
		;
		return $qb->getQuery()->getResult();
	}
}
