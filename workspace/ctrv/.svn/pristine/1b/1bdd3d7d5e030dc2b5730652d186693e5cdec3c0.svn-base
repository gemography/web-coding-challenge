<?php

namespace CTRV\EventBundle\Controller;

use Symfony\Component\HttpFoundation\Response;
use CTRV\CommonBundle\DependencyInjection\Constants;
use Doctrine\ORM\EntityRepository;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Template;
use CTRV\EventBundle\Entity\Event;
use CTRV\EventBundle\Entity\EventType;
use CTRV\EventBundle\Form\EventTypeType;

/**
 * Event controller.
 *
 * @Route("/event")
 */
class EventController extends Controller
{
	/**
	 * Charge tous les événements de la ville courante
	 * @Route("/listevent", name="event")
	 * @Template()
	 */
	public function loadEventAction () {
		 
		$em = $this->getDoctrine()->getEntityManager();
		 
		$currentCity= $this->get('session_service')->getCity();
		 
		if ($currentCity == null) {
			$this->get('session')->getFlashBag()->add('error', $this->get('translator')->trans('session.city.not_found'));
			$this->redirect($this->generateUrl("home"));
		}
		 
		$page = $this->getRequest()->get("page",1);
		$entities = $this->get("event_service")->getEvent($currentCity);
		 
		//pagination
		$nb_entities = count($entities);
		$nb_entities_page = Constants::events_number_per_page;
		$nb_pages = ceil($nb_entities/$nb_entities_page);
		$offset = ($page-1) * $nb_entities_page;
	
		$entities = array_slice($entities, $offset,$nb_entities_page);
	
		return  array (
				'entities' => $entities,
				'nb_pages' => $nb_pages,
				'page' => $page,
				'nb_entities' => $nb_entities
		);
	
    
	}
    	 
    	/**
    	 * Charge tous les agendas de la ville courante
    	 * @Route("/listagenda", name="agenda")
    	 * @Template()
    	 */
    	public function loadAgendaAction () {
    		 
    		$em = $this->getDoctrine()->getEntityManager();
    		 
    		$currentCity = $this->get('session_service')->getCity();
    		 
    		if ($currentCity == null) {
    			$this->get('session')->getFlashBag()->add('error', $this->get('translator')->trans('session.city.not_found'));
    			$this->redirect($this->generateUrl("home"));
    		}
    		 
    		$page = $this->getRequest()->get("page",1);
    		$entities = $this->get("event_service")->getAgenda($currentCity);
    		 
    		//pagination
    		$nb_entities = count($entities);
    		$nb_entities_page = Constants::agendas_number_per_page;
    		$nb_pages = ceil($nb_entities/$nb_entities_page);
    		$offset = ($page-1) * $nb_entities_page;
    
    		$entities = array_slice($entities, $offset,$nb_entities_page);
    
    		return  array (
    				'entities' => $entities,
    				'nb_pages' => $nb_pages,
    				'page' => $page,
    				'nb_entities' => $nb_entities
    		);
    	}
    	/**
    	 * ajouter un type d'évenement
    	 * @Route("/ajouter",name="ajouter_evenement")
    	 * @Template()
    	 */
    	public function addEventTypeAction () {
    		$em = $this->getDoctrine()->getEntityManager();
    		$form = $this->createForm(new EventTypeType(),new EventType());
    		// On vérifie qu'elle est de type POST
    		if ($this->getRequest()->getMethod() == 'POST') {
    			// On fait le lien Requête <-> Formulaire
    			$form->bind($this->getRequest());
    			// On vérifie que les valeurs rentrées sont correctes
    			if ($form->isValid()) {
    				// On l'enregistre notre objet $placeType dans la base de données
    				$eventType = $form->getData();
    				$em->persist($eventType);
    				$em->flush();
    				return $this->redirect($this->generateUrl("loadTypeEvents"));
    			}
    		}
    	
    			
    		return array('form'=>$form->createView());
    			
    	}
    	/**
    	 * modifier un type d'evenment
    	 * @Route("/modifier/{id}",name="modifier_evenement")
    	 * @Template()
    	 */
    	public function updateEventTypeAction(EventType $eventType) {
    		$form = $this->createForm(new EventTypeType, $eventType);
    		$request=$this->getRequest();
    		// On vérifie qu'elle est de type POST
    		if ($this->getRequest()->getMethod() == 'POST') {
    			// On fait le lien Requête <-> Formulaire
    			$form->bind($this->getRequest());
    			// On vérifie que les valeurs rentrées sont correctes
    			if ($form->isValid()) {
    				// On enregistre notre objet $placeType dans la base de données
    				$em = $this->getDoctrine()->getEntityManager();
    				$em->persist($eventType);
    				$em->flush();
    				// on redirige vers les types de place
    				return $this->redirect($this->generateUrl("loadTypeEvents"));
    			}
    				
    		}
    	
    		return array(
    				'eventType'=> $eventType,
    				'form'=>$form->createView());
    			
    	}
    	/**
    	 * Charge les type d'évenement de la ville courante
    	 * @Route("/loadTypeEvents", name="loadTypeEvents")
    	 * @Template()
    	 */
    	public function loadTypeEventsAction () {
    	
    		$em = $this->getDoctrine()->getEntityManager();
    	
    		$currentCity = $this->get('session_service')->getCity();
    	
    		if ($currentCity == null) {
    			$this->get('session')->getFlashBag()->add('error', $this->get('translator')->trans('session.city.not_found'));
    			$this->redirect($this->generateUrl("home"));
    		}
    	
    		$page = $this->getRequest()->get("page",1);
    	
    		$entities = $this->get("event_service")->getTypeEvents($currentCity);
    	
    		//pagination
    		$nb_entities = count($entities);
    		$nb_entities_page = Constants::events_number_per_page;
    		$nb_pages = ceil($nb_entities/$nb_entities_page);
    		$offset = ($page-1) * $nb_entities_page;
    	
    		$entities = array_slice($entities, $offset,$nb_entities_page);
    	
    		return  array (
    				'entities' => $entities,
    				'nb_pages' => $nb_pages,
    				'page' => $page,
    				'nb_entities' => $nb_entities
    		);
    	}
    	
    	 
    	
    	/**
    	 * Deletes an Event entity.
    	 *
    	 * @Route("/{id}/delete", name="event_delete" ) //requirements={"id" = "\d+"}
    	 * @Method("POST")
    	 * @Template()
    	 */
    	public function deleteAction($id) {
    		$em = $this->getDoctrine()->getManager();
    		$entity = $em->getRepository('CTRVEventBundle:Event')->find($id);
    	
    		$em->remove($entity);
    		$em->flush();
    	
    		return new Response(json_encode(array('result'=>true)));
    	}
    	
    

}
