<?php

namespace Proxies\__CG__\CTRV\PlaceBundle\Entity;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class Place extends \CTRV\PlaceBundle\Entity\Place implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function setActivity($activity)
    {
        $this->__load();
        return parent::setActivity($activity);
    }

    public function getActivity()
    {
        $this->__load();
        return parent::getActivity();
    }

    public function setLatitude($latitude)
    {
        $this->__load();
        return parent::setLatitude($latitude);
    }

    public function getLatitude()
    {
        $this->__load();
        return parent::getLatitude();
    }

    public function setLongitude($longitude)
    {
        $this->__load();
        return parent::setLongitude($longitude);
    }

    public function getLongitude()
    {
        $this->__load();
        return parent::getLongitude();
    }

    public function setIsApproximateAddress($isApproximateAddress)
    {
        $this->__load();
        return parent::setIsApproximateAddress($isApproximateAddress);
    }

    public function getIsApproximateAddress()
    {
        $this->__load();
        return parent::getIsApproximateAddress();
    }

    public function setDescription($description)
    {
        $this->__load();
        return parent::setDescription($description);
    }

    public function getDescription()
    {
        $this->__load();
        return parent::getDescription();
    }

    public function setTitle($title)
    {
        $this->__load();
        return parent::setTitle($title);
    }

    public function getTitle()
    {
        $this->__load();
        return parent::getTitle();
    }

    public function setSiteUrl($siteUrl)
    {
        $this->__load();
        return parent::setSiteUrl($siteUrl);
    }

    public function getSiteUrl()
    {
        $this->__load();
        return parent::getSiteUrl();
    }

    public function setTown($town)
    {
        $this->__load();
        return parent::setTown($town);
    }

    public function getTown()
    {
        $this->__load();
        return parent::getTown();
    }

    public function setStreet($street)
    {
        $this->__load();
        return parent::setStreet($street);
    }

    public function getStreet()
    {
        $this->__load();
        return parent::getStreet();
    }

    public function setMark($mark)
    {
        $this->__load();
        return parent::setMark($mark);
    }

    public function getMark()
    {
        $this->__load();
        return parent::getMark();
    }

    public function setNumberMark($numberMark)
    {
        $this->__load();
        return parent::setNumberMark($numberMark);
    }

    public function getNumberMark()
    {
        $this->__load();
        return parent::getNumberMark();
    }

    public function setAddedDate($addedDate)
    {
        $this->__load();
        return parent::setAddedDate($addedDate);
    }

    public function getAddedDate()
    {
        $this->__load();
        return parent::getAddedDate();
    }

    public function addComment(\CTRV\PlaceBundle\Entity\PlaceComment $comments)
    {
        $this->__load();
        return parent::addComment($comments);
    }

    public function removeComment(\CTRV\PlaceBundle\Entity\PlaceComment $comments)
    {
        $this->__load();
        return parent::removeComment($comments);
    }

    public function getComments()
    {
        $this->__load();
        return parent::getComments();
    }

    public function setPlaceType(\CTRV\PlaceBundle\Entity\PlaceType $placeType = NULL)
    {
        $this->__load();
        return parent::setPlaceType($placeType);
    }

    public function getPlaceType()
    {
        $this->__load();
        return parent::getPlaceType();
    }

    public function setAuteur(\CTRV\CommonBundle\Entity\User $auteur = NULL)
    {
        $this->__load();
        return parent::setAuteur($auteur);
    }

    public function getAuteur()
    {
        $this->__load();
        return parent::getAuteur();
    }

    public function setCity(\CTRV\CommonBundle\Entity\City $city = NULL)
    {
        $this->__load();
        return parent::setCity($city);
    }

    public function getCity()
    {
        $this->__load();
        return parent::getCity();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'activity', 'latitude', 'longitude', 'isApproximateAddress', 'description', 'title', 'siteUrl', 'town', 'street', 'mark', 'numberMark', 'addedDate', 'comments', 'placeType', 'auteur', 'city');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}